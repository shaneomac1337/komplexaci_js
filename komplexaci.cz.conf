# Redirect HTTP non-www to HTTPS www
server {
    listen 80;
    listen [::]:80;
    server_name komplexaci.cz www.komplexaci.cz;

    # Redirect all HTTP requests to HTTPS www
    return 301 https://www.komplexaci.cz$request_uri;
}

# Redirect HTTPS non-www to HTTPS www
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name komplexaci.cz;

    # SSL certificates
    ssl_certificate /etc/letsencrypt/live/komplexaci.cz/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/komplexaci.cz/privkey.pem;

    # Redirect to www version
    return 301 https://www.komplexaci.cz$request_uri;
}

# Main server block for www.komplexaci.cz with HTTPS - Reverse Proxy to Next.js
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name www.komplexaci.cz;

    # SSL certificates
    ssl_certificate /etc/letsencrypt/live/komplexaci.cz/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/komplexaci.cz/privkey.pem;

    # SSL configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:10m;
    ssl_session_tickets off;

    # HSTS (optional but recommended)
    add_header Strict-Transport-Security "max-age=63072000" always;

    # Maintenance mode check
    set $maintenance_mode 0;
    if (-f /var/www/maintenance.flag) {
        set $maintenance_mode 1;
    }

    # Serve maintenance page if maintenance mode is enabled
    location / {
        if ($maintenance_mode = 1) {
            return 503;
        }

        # Normal proxy to Next.js
        proxy_pass http://localhost:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;

        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;

        # Buffer settings
        proxy_buffering on;
        proxy_buffer_size 128k;
        proxy_buffers 4 256k;
        proxy_busy_buffers_size 256k;
    }

    # Handle Next.js static files efficiently (only when not in maintenance)
    location /_next/static/ {
        if ($maintenance_mode = 1) {
            return 503;
        }

        proxy_pass http://localhost:3000;
        proxy_cache_valid 200 1y;
        add_header Cache-Control "public, immutable";
    }

    # Handle API routes (only when not in maintenance)
    location /api/ {
        if ($maintenance_mode = 1) {
            return 503;
        }

        proxy_pass http://localhost:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }

    # Custom error pages
    error_page 502 503 504 /maintenance.html;
    
    # Serve maintenance page
    location = /maintenance.html {
        root /var/www/html;
        internal;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";
    }

    # Fallback error page location
    location = /50x.html {
        root /usr/share/nginx/html;
    }
}
